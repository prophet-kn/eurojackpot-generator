{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","generate","numbersFive","randomizeFive","numbersTwo","randomizeTwo","five","two","rollNumbers","bind","generateButton","generateFive","generateTwo","cleanStates","random","this","shuff","_","shuffle","setState","slice","numbersTwoOne","className","sort","a","b","map","e","i","key","onClick","width","height","viewBox","fillRule","d","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","console","log"],"mappings":"gQA+FeA,E,kDA1Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAU,EACVC,YAAa,GACbC,cAAe,EACfC,WAAY,GACZC,aAAc,EACdC,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAClMC,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAGnC,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBACnB,EAAKI,YAAc,EAAKA,YAAYJ,KAAjB,gBAhBF,E,0DAoBjB,IAAIK,EAASC,KAAKf,MAAMO,IACpBS,EAAQC,IAAEC,QAAQJ,GAEtBC,KAAKI,SAAS,CACZf,WAAYa,IAAEG,MAAMJ,EAAO,EAAG,O,qCAKhC,IAAIF,EAASC,KAAKf,MAAMM,KACpBU,EAAQC,IAAEC,QAAQJ,GAEtBC,KAAKI,SAAS,CACZjB,YAAae,IAAEG,MAAMJ,EAAO,EAAG,O,oCAKjCD,KAAKI,SAAS,CAAClB,UAAU,IACzBc,KAAKH,cACLG,KAAKJ,iB,oCAILI,KAAKI,SAAS,CACZjB,YAAa,GACbC,cAAgB,EAChBC,WAAY,GACZiB,cAAe,IAGjBN,KAAKP,gB,uCAGW,IAAD,OACTF,EAAOS,KAAKf,MAAME,YAClBK,EAAMQ,KAAKf,MAAMI,WAEvB,OACE,yBAAKkB,UAAW,sBACd,yBAAKA,UAAW,8BACbhB,EAAKiB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAAGC,KAAI,SAACC,EAAGC,GAClC,OACE,0BAAMC,IAAKD,GAAID,OAIrB,yBAAKL,UAAW,8BACbf,EAAIgB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAAGC,KAAI,SAACC,EAAGC,GACjC,OACE,0BAAMC,IAAKD,GAAID,OAIrB,yBAAKL,UAAW,kBAAmBQ,QAAS,SAACH,GAAD,OAAO,EAAKd,gBACtD,yBAAKkB,MAAM,MAAMC,OAAO,MAAMC,QAAQ,aAAY,0BAAMC,SAAS,UAAUC,EAAE,sX,+BAOnF,OACC,yBAAKb,UAAW,YACbP,KAAKL,sB,GArFK0B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,QD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,gBC3HnBC,QAAQC,IACN,kRAIqD,yC","file":"static/js/main.f2fa5ff7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './style.css'\nimport _ from 'lodash'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      generate: false,\n      numbersFive: [],\n      randomizeFive: 0,\n      numbersTwo: [],\n      randomizeTwo: 0,\n      five: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],\n      two: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    }\n\n    this.rollNumbers = this.rollNumbers.bind(this)\n    this.generateButton = this.generateButton.bind(this)\n    this.generateFive = this.generateFive.bind(this)\n    this.generateTwo = this.generateTwo.bind(this)\n    this.cleanStates = this.cleanStates.bind(this)\n  }\n\n  generateTwo() {\n    let random = this.state.two,\n        shuff = _.shuffle(random)\n\n    this.setState({\n      numbersTwo: _.slice(shuff, 0, 2)\n    })\n  }\n\n  generateFive() {\n    let random = this.state.five,\n        shuff = _.shuffle(random)\n\n    this.setState({\n      numbersFive: _.slice(shuff, 0, 5)\n    })\n  }\n\n  rollNumbers() {\n    this.setState({generate: true})\n    this.generateTwo()\n    this.generateFive()\n  }\n\n  cleanStates() {\n    this.setState({\n      numbersFive: [],\n      randomizeFive:  0,\n      numbersTwo: [],\n      numbersTwoOne: 0\n    })\n\n    this.rollNumbers()\n  }\n\n  generateButton() {\n    const five = this.state.numbersFive\n    const two = this.state.numbersTwo\n\n    return (\n      <div className={'ejp-main-generated'}>\n        <div className={'ejp-main-generated-numbers'}>\n          {five.sort((a, b) => a - b).map((e, i) => {\n            return (\n              <span key={i}>{e}</span>\n            )\n          })}\n        </div>\n        <div className={'ejp-main-generated-numbers'}>\n          {two.sort((a, b) => a - b).map((e, i) => {\n            return (\n              <span key={i}>{e}</span>\n            )\n          })}\n        </div>\n        <div className={'ejp-main-return'} onClick={(e) => this.cleanStates()}>\n          <svg width=\"100\" height=\"100\" viewBox=\"0 0 14 16\"><path fillRule=\"evenodd\" d=\"M8 9H6V4h2v5zm-2 3h2v-2H6v2zm6.33-2H10l1.5 1.5c-1.05 1.33-2.67 2.2-4.5 2.2A5.71 5.71 0 011.3 8c0-.34.03-.67.09-1H.08C.03 7.33 0 7.66 0 8c0 3.86 3.14 7 7 7 2.19 0 4.13-1.02 5.41-2.59L14 14v-4h-1.67zM1.67 6H4L2.5 4.5C3.55 3.17 5.17 2.3 7 2.3c3.14 0 5.7 2.56 5.7 5.7 0 .34-.03.67-.09 1h1.31c.05-.33.08-.66.08-1 0-3.86-3.14-7-7-7-2.19 0-4.13 1.02-5.41 2.59L0 2v4h1.67z\"></path></svg>\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n     <div className={\"ejp-main\"}>\n       {this.generateButton()}\n     </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('ejp'));\nserviceWorker.unregister();\n\nconsole.log( // eslint-disable-next-line\n  \"%c\\                      |         |       |           \\n\\\n  ,---.,---.,---.,---.|---.,---.|---    |__/ ,---.  \\n\\\n  |   ||    |   ||   ||   ||---'|    ---|  \\\\ |   |  \\n\\\n  |---'`    `---'|---'`   '`---'`---'   `   ``   '  \\n\\\n  |              |                                  \", \"background-color: black; color: red;\"\n)\n"],"sourceRoot":""}