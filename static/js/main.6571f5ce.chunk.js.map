{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","generate","numbersFive","randomizeFive","numbersTwo","randomizeTwo","five","two","rollNumbers","bind","assertThisInitialized","generateButton","generateFive","generateTwo","cleanStates","random","shuff","_","shuffle","setState","slice","numbersTwoOne","_this2","btn","react_default","a","createElement","className","onClick","e","width","height","viewBox","fillRule","d","sort","b","map","i","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","console","log"],"mappings":"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","file":"static/js/main.6571f5ce.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './style.css'\r\nimport _ from 'lodash'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      generate: false,\r\n      numbersFive: [],\r\n      randomizeFive: 0,\r\n      numbersTwo: [],\r\n      randomizeTwo: 0,\r\n      five: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],\r\n      two: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    }\r\n\r\n    this.rollNumbers = this.rollNumbers.bind(this)\r\n    this.generateButton = this.generateButton.bind(this)\r\n    this.generateFive = this.generateFive.bind(this)\r\n    this.generateTwo = this.generateTwo.bind(this)\r\n    this.cleanStates = this.cleanStates.bind(this)\r\n  }\r\n\r\n  generateTwo() {\r\n    let random = this.state.two,\r\n        shuff = _.shuffle(random)\r\n\r\n    this.setState({\r\n      numbersTwo: _.slice(shuff, 0, 2)\r\n    })\r\n  }\r\n\r\n  generateFive() {\r\n    let random = this.state.five,\r\n        shuff = _.shuffle(random)\r\n\r\n    this.setState({\r\n      numbersFive: _.slice(shuff, 0, 5)\r\n    })\r\n  }\r\n\r\n  rollNumbers() {\r\n    this.setState({generate: true})\r\n    this.generateTwo()\r\n    this.generateFive()\r\n  }\r\n\r\n  cleanStates() {\r\n    this.setState({\r\n      numbersFive: [],\r\n      randomizeFive:  0,\r\n      numbersTwo: [],\r\n      numbersTwoOne: 0\r\n    })\r\n\r\n    this.rollNumbers()\r\n  }\r\n\r\n  generateButton() {\r\n    let btn = this.state.generate,\r\n        five = this.state.numbersFive,\r\n        two = this.state.numbersTwo\r\n\r\n    if (btn === false) {\r\n      return (\r\n        <div className={'ejp-main-generate'} onClick={(e) => this.rollNumbers()}>\r\n          <svg width=\"200\" height=\"200\" viewBox=\"0 0 14 16\"><path fillRule=\"evenodd\" d=\"M8 9H6V4h2v5zm-2 3h2v-2H6v2zm6.33-2H10l1.5 1.5c-1.05 1.33-2.67 2.2-4.5 2.2A5.71 5.71 0 011.3 8c0-.34.03-.67.09-1H.08C.03 7.33 0 7.66 0 8c0 3.86 3.14 7 7 7 2.19 0 4.13-1.02 5.41-2.59L14 14v-4h-1.67zM1.67 6H4L2.5 4.5C3.55 3.17 5.17 2.3 7 2.3c3.14 0 5.7 2.56 5.7 5.7 0 .34-.03.67-.09 1h1.31c.05-.33.08-.66.08-1 0-3.86-3.14-7-7-7-2.19 0-4.13 1.02-5.41 2.59L0 2v4h1.67z\"></path></svg>\r\n        </div>\r\n      )\r\n    }\r\n    else if (btn === true) {\r\n      return (\r\n        <div className={'ejp-main-generated'}>\r\n          <div className={'ejp-main-generated-numbers'}>\r\n            {five.sort((a, b) => a - b).map((e, i) => {\r\n              return (\r\n                <span key={i}>{e}</span>\r\n              )\r\n            })}\r\n          </div>\r\n          <div className={'ejp-main-generated-numbers'}>\r\n            {two.sort((a, b) => a - b).map((e, i) => {\r\n              return (\r\n                <span key={i}>{e}</span>\r\n              )\r\n            })}\r\n          </div>\r\n          <div className={'ejp-main-return'} onClick={(e) => this.cleanStates()}>\r\n            <svg width=\"100\" height=\"100\" viewBox=\"0 0 14 16\"><path fillRule=\"evenodd\" d=\"M8 9H6V4h2v5zm-2 3h2v-2H6v2zm6.33-2H10l1.5 1.5c-1.05 1.33-2.67 2.2-4.5 2.2A5.71 5.71 0 011.3 8c0-.34.03-.67.09-1H.08C.03 7.33 0 7.66 0 8c0 3.86 3.14 7 7 7 2.19 0 4.13-1.02 5.41-2.59L14 14v-4h-1.67zM1.67 6H4L2.5 4.5C3.55 3.17 5.17 2.3 7 2.3c3.14 0 5.7 2.56 5.7 5.7 0 .34-.03.67-.09 1h1.31c.05-.33.08-.66.08-1 0-3.86-3.14-7-7-7-2.19 0-4.13 1.02-5.41 2.59L0 2v4h1.67z\"></path></svg>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n     <div className={\"ejp-main\"}>\r\n       {this.generateButton()}\r\n     </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('ejp'));\r\nserviceWorker.unregister();\r\n\r\nconsole.log( // eslint-disable-next-line\r\n  \"%c\\                      |         |       |           \\n\\\r\n  ,---.,---.,---.,---.|---.,---.|---    |__/ ,---.  \\n\\\r\n  |   ||    |   ||   ||   ||---'|    ---|  \\\\ |   |  \\n\\\r\n  |---'`    `---'|---'`   '`---'`---'   `   ``   '  \\n\\\r\n  |              |                                  \", \"background-color: black; color: red;\"\r\n)\r\n"],"sourceRoot":""}